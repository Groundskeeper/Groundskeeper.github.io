{
	"name": "Menu",

	"minY":  250,
	"minX": 0,
	"maxY": - 45,
	"maxX": - 10,

	"isStarting": false,

	"levelType" : "auto-scroll-X",

	"backgroundtiles": [
		{
			"isStartingBackground": true,
			"filepath": ".//Images/Background_CitySkyline.png",
			"zplane": -1,
		},
		{
			"isStartingBackground": false,
			"filepath": ".//Images/Background_Mountains.png",
			"zplane": -1
		},
		{
			"isStartingBackground": false,
			"filepath": ".//Images/Background_Hangar.png",
			"zplane": 0
		},
		{
			"isStartingBackground": false,
			"filepath": ".//Images/Background_Bridge.png",
			"zplane": 0
		},
		{
			"isStartingBackground": true,
			"filepath": ".//Images/Background_Street.png",
			"zplane": 0
		},
		{
			"isStartingBackground": false,
			"filepath": ".//Images/Background_Tunnel.png",
			"zplane": 0
		}
	],
	"sounds": [
		{
			"keyname": "backgroundsong",
			"filepath": ".//Audio/Menu.ogg",
			"gamesoundtype": "music"
		},
		{
			"keyname": "MoveCursor",
			"filepath": ".//Audio/MoveCursor.wav",
			"gamesoundtype": "sfx"
		},
		{
			"keyname": "ConfirmSelection",
			"filepath": ".//Audio/ConfirmSelection.wav",
			"gamesoundtype": "sfx"
		},
		{
			"keyname": "PlayerGotHit",
			"filepath": ".//Audio/PlayerGotHit.wav",
			"gamesoundtype": "sfx"
		}
	],
	"items": [
		{
			"name": "player",
			"numcopy": 1,
			"filepath": ".//Items//player.json"
		},
		{
			"name": "playerBullet",
			"numcopy": 10,
			"filepath": ".//Items//playerBullet.json"
		}
	],
	"menuscreens": [
		{
			"title": "Main",
			"menuoptions": [
				{
					"text": "Start",
					"onselect": "this.isStarting = true;gameEngine.soundArray[\"backgroundsong\"].stop();",
					"onleft": null,
					"onright": null,
					"font": "Carter One",
					"fontsize": "48px",
					"position": {
						"x": "center",
						"y": 250
					}
				},
				{
					"text": "Options",
					"onselect": "this.ChangeMenuScreen(\"Options\");",
					"onleft": null,
					"onright": null,
					"font": "Carter One",
					"fontsize": "48px",
					"position": {
						"x": "center",
						"y": 300
					}
				},
				{
					"text": "Quit",
					"onselect": "window.close();",
					"onleft": null,
					"onright": null,
					"font": "Carter One",
					"fontsize": "48px",
					"position": {
						"x": "center",
						"y": 350
					}
				}
			]
		},
		{
			"title": "Options",
			"menuoptions": [
				{
					"text": "Music Volume",
					"onselect": null,
					"onleft": "gameEngine.SetVolume(\"music\", gameEngine.musicVolume - 0.1);gameEngine.soundArray[\"backgroundsong\"].play(true);",
					"onright": "gameEngine.SetVolume(\"music\", gameEngine.musicVolume + 0.1);gameEngine.soundArray[\"backgroundsong\"].play(true);",
					"font": "Carter One",
					"fontsize": "48px",
					"position": {
						"x": "center",
						"y": 250
					}
				},
				{
					"text": "SFX Volume",
					"onselect": null,
					"onleft": "gameEngine.SetVolume(\"sfx\", gameEngine.sfxVolume - 0.1);gameEngine.soundArray[\"PlayerGotHit\"].play();",
					"onright": "gameEngine.SetVolume(\"sfx\", gameEngine.sfxVolume + 0.1);gameEngine.soundArray[\"PlayerGotHit\"].play();",
					"font": "Carter One",
					"fontsize": "48px",
					"position": {
						"x": "center",
						"y": 350
					}
				},
				{
					"text": "Back",
					"onselect": "this.ChangeMenuScreen(\"Main\");",
					"font": "Carter One",
					"fontsize": "48px",
					"position": {
						"x": "center",
						"y": 450
					}
				}
			]
		}
	],
	"Enter" : [
		"console.log('Initializing MENU gamestate');",

		"this.minY = 250;",
		"this.minX = 0;",
		"this.maxY = gameEngine.canvas.height - 45;	// The current LOWEST point we can move the playerObj on screen",
		"this.maxX = gameEngine.canvas.width - 10;	// The current farthest RIGHT point we can move the playerObj on screen",

		"this.timestamp = 0;",
		"this.isStarting = false;",

		"var xmlDoc = gameEngine.ReadXMLFile('Menu.xml');",
		"var xmlDocItems = gameEngine.ReadXMLFile('MenuItems.xml');",

		"// NOTE:EXPERIMENTAL",
		"// // Load up our level file",
		"// var jsonData = gameEngine.ReadJSONFile('./Levels/Menu.json');",

		"// Set up our backgroundTiles",
		"var tiles = xmlDoc.getElementsByTagName('backgroundtile');",
		"this.backgroundTiles = gameEngine.loadBackgroundTiles(tiles);",
		
		"// NOTE:EXPERIMENTAL",
		"// this.backgroundTiles = gameEngine.loadBackgroundTilesJSON(jsonData.backgroundtiles);",

		"// Set the background speeds",
		"for (var i = 0 ; i < this.backgroundTiles.length ; i++)",
		"	this.backgroundTiles[i].speedX = this.backgroundTiles[i].z == 0 ?  -30 : -2.5;",

		"// Update the backgrounds with the furthest the player has been!",
		"if (this.background0 != null){",
		"	// Run through the backgroundTiles array and find all the backgroundTiles that are of this zPlane and change their source",
		"	for (var j = 0; j < this.backgroundTiles.length; j++) {",
		"		if (this.backgroundNeg1 != null && this.backgroundTiles[j].z == -1){",
		"			this.backgroundTiles[j].image.src = this.backgroundNeg1;",
		"		}",
		"		if (this.background0 != null && this.backgroundTiles[j].z == 0){",
		"			this.backgroundTiles[j].image.src = this.background0;",
		"		}",
		"		if (this.backgroundPos1 != null && this.backgroundTiles[j].z == 1){",
		"			this.backgroundTiles[j].image.src = this.backgroundPos1;",
		"		}",
		"	}",
		"}",

		"// Set up our sounds",
		"var sounds = xmlDoc.getElementsByTagName('sound');",
		"gameEngine.loadSounds(sounds);",

		"// NOTE:EXPERIMENTAL",
		"//gameEngine.loadSoundsJSON(jsonData.sounds);",

		"// Our world items and their animation/hitbox data",
		"var items = xmlDocItems.getElementsByTagName('worlditem');",
		"this.worldObjects = gameEngine.loadItems(items);",

		"// NOTE:EXPERIMENTAL",
		"//this.worldObjects = gameEngine.loadItemsJSON(jsonData.items);",

		"// This should never happen but JUST IN CASE",
		"if (this.worldObjects.length == 0)",
		"	console.log('No worldObjects found!');",

		"// Set the playerObj variable by running through the worldObjects array and locating the item named 'player'",
		"for (var i = 0 ; i < this.worldObjects.length ; i ++){",
		"	if (this.worldObjects[i].name == 'player'){",
		"		this.playerObj = this.worldObjects[i];",
		"		break;",
		"	}",
		"}",

		"// Set up our menuScreens",
		"var screens = xmlDoc.getElementsByTagName('menuscreen');",
		"for (var i = 0 ; i < screens.length ; i++){",
		"	var title = gameEngine.GetEventTagValue(screens[i], 'title');",

		"	// Our menu options for this screen",
		"	var menuoptions = screens[i].getElementsByTagName('menuoption')",

		"	// temp array of menuOption items",
		"	var tempMenuOptions = [];",

		"	// Get all the menuOption items for this screen",
		"	for (var j = 0 ; j < menuoptions.length ; j++){",
		"		var text = gameEngine.GetEventTagValue(menuoptions[j], 'text');",
		"		var onselect = gameEngine.GetEventTagValue(menuoptions[j], 'onselect');",
		"		var onleft = gameEngine.GetEventTagValue(menuoptions[j], 'onleft');",
		"		var onright = gameEngine.GetEventTagValue(menuoptions[j], 'onright');",

		"		var font = gameEngine.GetEventTagValue(menuoptions[j], 'font');",
		"		var fontsize = gameEngine.GetEventTagValue(menuoptions[j], 'fontsize');",
		"		var position = gameEngine.GetEventTagValue(menuoptions[j], 'position');",
		"		var x = gameEngine.GetEventTagValue( menuoptions[j].getElementsByTagName('position')[0], 'x' );",
		"			if (x.toLowerCase() == 'center')",
		"				x = gameEngine.canvas.width/2;",
		"		var y = gameEngine.GetEventTagValue( menuoptions[j].getElementsByTagName('position')[0], 'y' );",

		"		// Add it to our temp menuOption array",
		"		tempMenuOptions.push(new menuOption(text, onselect, onleft, onright, font, fontsize, parseInt(x), parseInt(y)));",
		"	}",

		"	// Add it to our menuScreen array!",
		"	this.menuScreens.push(new menuScreen(title, tempMenuOptions));",
		"}",

		"// NOTE:EXPERIMENTAL",
		"/*",
		"// Set up our menuScreens",
		"for (var i = 0 ; i < jsonData.menuscreens.length ; i++){",
		"	var title = jsonData.menuscreens[i].title;",

		"	// temp array of menuOption items",
		"	var tempMenuOptions = [];",

		"	// Get all the menuOption items for this screen",
		"	// for (var j = 0 ; j < menuoptions.length ; j++){",
		"	for (var j = 0 ; j < jsonData.menuscreens[i].menuoptions.length ; j++){",
		"		var text = jsonData.menuscreens[i].menuoptions[j].text;",
		"		var onselect = jsonData.menuscreens[i].menuoptions[j].onselect;",
		"		var onleft = jsonData.menuscreens[i].menuoptions[j].onleft;",
		"		var onright = jsonData.menuscreens[i].menuoptions[j].onright;",

		"		var font = jsonData.menuscreens[i].menuoptions[j].font;",
		"		var fontsize = jsonData.menuscreens[i].menuoptions[j].fontsize;",
		"		var position = jsonData.menuscreens[i].menuoptions[j].position;",
		"		var x = jsonData.menuscreens[i].menuoptions[j].position.x;",
		"			if (x.toLowerCase() == 'center')",
		"				x = gameEngine.canvas.width/2;",
		"		var y = jsonData.menuscreens[i].menuoptions[j].position.y;",

		"		// Add it to our temp menuOption array",
		"		tempMenuOptions.push(new menuOption(text, onselect, onleft, onright, font, fontsize, parseInt(x), parseInt(y)));",
		"	}",

		"	// Add it to our menuScreen array!",
		"	this.menuScreens.push(new menuScreen(title, tempMenuOptions));",
		"}",
		"*/",

		"// This should never happen but just in case",
		"if (this.menuScreens.length <= 0){",
		"	console.log('No menuScreens found!');",
		"}",

		"// Find the menuScreen with a title of 'Main'",
		"this.ChangeMenuScreen('Main');",

		"console.log('Initialized MENU gamestate');"
	],
	"Exit" : [
		"console.log('===Unloading MENU gamestate===');",

		"// curMenuScreen",
		"console.log('Unloading curMenuScreen');",
		"this.curMenuScreen = null;",

		"// worldObjects",
		"itemManager.Unload();"

		"// backgroundTiles array",
		"console.log('Releasing references to the items in the backgroundTiles array');",
		"for (var i = 0 ; i < this.backgroundTiles.length ; i++){",
		"	if (this.backgroundTiles[i] != null){",
		"		this.backgroundTiles[i].unload();",
		"		this.backgroundTiles[i] = null;",
		"	}",
		"}",
		"console.log('Emptying out the backgroundTiles array');",
		"while (this.backgroundTiles.length > 0){",
		"	this.backgroundTiles.pop();",
		"}",

		"// Same with the playerObj . . .",
		"console.log('Releasing references to the playerObj');",
		"this.playerObj = null;",

		"// gameEngine soundArray",
		"console.log('Unloading the soundArray object');",
		"for (var i = 0 ; i < Object.keys(gameEngine.soundArray).length ; i++){",
		"	// If we haven't already unloaded it earlier",
		"	if (gameEngine.soundArray[Object.keys(gameEngine.soundArray)[i]] != null){",
		"		gameEngine.soundArray[Object.keys(gameEngine.soundArray)[i]].unload();",
		"		gameEngine.soundArray[Object.keys(gameEngine.soundArray)[i]] = null;",
		"	}",
		"}",
		"console.log('Emptying out the soundArray');",
		"gameEngine.soundArray = [];",

		"// menuScreens array",
		"console.log('Releasing references to the items in the menuScreens array');",
		"for (var i = 0 ; i < this.menuScreens.length ; i++){",
		"	// If we haven't already unloaded it earlier",
		"	if (this.menuScreens[i] != null){",
		"		this.menuScreens[i].unload();",
		"		this.menuScreens[i] = null;",
		"	}",
		"}",
		"console.log('Emptying out the menuScreens array');",
		"while (this.menuScreens.length > 0){",
		"	this.menuScreens.pop();",
		"}",

		"// imagesArray",
		"console.log('Releasing references to the images in the imagesArray');",
		"for (var i = 0 ; i < gameEngine.imagesArray.length ; i++){",
		"	gameEngine.imagesArray[i] = null;",
		"}",
		"console.log('Emptying out the imagesArray');",
		"while (gameEngine.imagesArray.length > 0){",
		"	gameEngine.imagesArray.pop();",
		"}",

		"// Kill ALL the DOM objects",
		"this.ChangeMenuDomElements();",

		"console.log('===Unloaded MENU gamestate===');"
	],
	"GetInput" : [
		
	]
}